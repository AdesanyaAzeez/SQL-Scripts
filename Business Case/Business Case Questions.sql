USE `online_retail_store`;						-- declare to use the retail store database

-- 1. Total Revenue: Calculate the total revenue generated by the store.
SELECT SUM(amount_sold - order_amount) total_revenue
FROM order_items;

-- 2. Average Order Value: Calculate the average order value.
SELECT AVG(total_amount)
FROM orders;

-- 3. Top-Selling Products: Identify the top-selling products based on the quantity sold.
WITH qty_sold AS (
SELECT 
	product_name, 
    SUM(quantity) total_count
FROM order_items o LEFT JOIN products p
	ON o.product_id = p.product_id
GROUP BY 1
)
SELECT product_name
FROM qty_sold
WHERE total_count = (SELECT MAX(total_count) FROM qty_sold);

-- 4. Customer Orders: Retrieve details of all orders placed by a specific customer.
SELECT 
	oi.order_id,
    o.order_date,
    CONCAT(c.first_name," ",c.last_name) customer_name,
    p.product_name,
    oi.quantity,
    p.unit_price,
    oi.order_amount,
    oi.amount_sold
FROM order_items oi
	JOIN orders o 
		ON oi.order_id = o.order_id
    JOIN products p 
		ON oi.product_id = p.product_id
	JOIN customers c
		ON o.customer_id = c.customer_id;
        
-- 5. Stock count: How many quantity of products are left after sales?
SELECT 
	p.product_id, 
    p.stock_quantity, 
    COALESCE(sum(oi.quantity), 0) quantity_sold, 
    p.stock_quantity - COALESCE(sum(oi.quantity), 0) quantity_left
FROM products p LEFT JOIN order_items oi
	ON p.product_id = oi.product_id
GROUP BY oi.product_id, p.product_id;

-- 6. Low Stock Products: Find products with low stock (less than 10 units) after sales
WITH stock_count AS (
SELECT 
	p.product_id, 
    p.stock_quantity, 
    COALESCE(sum(oi.quantity), 0) quantity_sold, 
    p.stock_quantity - COALESCE(sum(oi.quantity), 0) quantity_left
FROM products p LEFT JOIN order_items oi
	ON p.product_id = oi.product_id
GROUP BY oi.product_id, p.product_id
)
SELECT product_id, quantity_left
FROM stock_count
WHERE quantity_left <= 10;


